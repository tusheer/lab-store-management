// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                          Int                      @id @default(autoincrement())
  email                       String                   @unique @map("email")
  password                    String?
  name                        String?
  access                      Json                     @default("{}")
  isActive                    Boolean                  @default(true)
  isDeleted                   Boolean                  @default(false)
  createdAt                   DateTime                 @default(now())
  updatedAt                   DateTime                 @updatedAt
  phone                       String?
  address                     String?
  avatar                      String?
  designation                 String?
  department                  String?
  reportingBossId             Int? // Nullable
  reportingBoss               User?                    @relation("ReportingBoss", fields: [reportingBossId], references: [id])
  subordinates                User[]                   @relation("ReportingBoss")
  lastGeneralUpdates          GeneralStore[]           @relation("LastUpdatedBy")
  registerID                  String?                  @unique
  generalStoreNote            GeneralStoreNote[]
  generalStorePurchaseUpdates GeneralStorePurchase[]
  generalStoreAllocation      GeneralStoreAllocation[]
}

model GeneralStorePurchase {
  id                Int      @id @default(autoincrement())
  point             Int
  purchasedAt       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isDeleted         Boolean  @default(false)
  productName       String
  reciptAmount      String?
  stockAmount       String?
  price             Int?
  unitName          String?
  sellerNameAddress String
  cashMemoNo        String
  cashMemoDate      String
  oic_Signature     String?
  sk_Signature      String?
  User              User?    @relation(fields: [userId], references: [id])
  userId            Int?
  note              String?
  images            String[]
}

model GeneralStoreAllocation {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  allocatedAt DateTime @default(now())
  personName  String?
  productName String
  department  String
  quantity    Int?
  unitName    String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  note        String?
  images      String[]
}

model GeneralStore {
  id                             Int                @id @default(autoincrement())
  point                          Int
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime           @updatedAt
  isDeleted                      Boolean            @default(false)
  productName                    String
  stockAmount                    String?
  unitName                       String?
  lastUpdatedById                Int? // Nullable
  lastUpdatedBy                  User?              @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  generalStoreNotes              GeneralStoreNote[]
  alertWhenStockAmountIsLessThan Int?
}

model GeneralStoreNote {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  note           String
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  generalStore   GeneralStore @relation(fields: [generalStoreId], references: [id])
  generalStoreId Int
  images         String[]
}
