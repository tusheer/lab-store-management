// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                                  Int                        @id @default(autoincrement())
  email                               String                     @unique @map("email")
  password                            String?
  name                                String?
  access                              Json                       @default("{}")
  isActive                            Boolean                    @default(true)
  isDeleted                           Boolean                    @default(false)
  createdAt                           DateTime                   @default(now())
  updatedAt                           DateTime                   @updatedAt
  phone                               String?
  address                             String?
  avatar                              Json?
  designation                         String?
  department                          String?
  reportingBossId                     Int? // Nullable
  reportingBoss                       User?                      @relation("ReportingBoss", fields: [reportingBossId], references: [id])
  subordinates                        User[]                     @relation("ReportingBoss")
  registerID                          String?                    @unique
  lastGeneralStoreSourceUpdates       GeneralStoreSource[]       @relation("LastUpdatedBy")
  lastGeneralStoreDistributionUpdates GeneralStoreDistribution[] @relation("LastUpdatedBy")
  lastGeneralUpdates                  GeneralStore[]             @relation("LastUpdatedBy")
  generalStoreNote                    GeneralStoreNote[]
  generalStoreHistory                 GeneralStoreHistory[]
  institution                         Institution                @relation(fields: [institutionId], references: [id])
  institutionId                       Int
  permissions                         Json?
  assignedShops                       Shop[]
  assigedDepartments                  Department[]
}

model Institution {
  id                       Int                        @id @default(autoincrement())
  name                     String
  logo                     Json?
  subdomain                String                     @unique
  colorTheme               String?
  tag                      String?
  title                    String?
  address                  String
  phone                    String
  email                    String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isDeleted                Boolean                    @default(false)
  FinancialYear            FinancialYear[]
  GeneralStoreSource       GeneralStoreSource[]
  GeneralStoreDistribution GeneralStoreDistribution[]
  GeneralStore             GeneralStore[]
  GeneralStoreNote         GeneralStoreNote[]
  GeneralStoreHistory      GeneralStoreHistory[]
  User                     User[]
  Department               Department[]
  Shop                     Shop[]
  onlyGeneralStore         Boolean                    @default(false)
  permissions              Json?
  shopWithoutDepartment    Boolean                    @default(false)
  onlyDepartment           Boolean                    @default(false)
}

model FinancialYear {
  id                       Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isDeleted                Boolean                    @default(false)
  name                     String
  startDate                DateTime
  endDate                  DateTime
  isActive                 Boolean                    @default(true)
  GeneralStore             GeneralStore[]
  GeneralStoreSource       GeneralStoreSource[]
  GeneralStoreDistribution GeneralStoreDistribution[]
  institution              Institution                @relation(fields: [institutionId], references: [id])
  institutionId            Int
}

model GeneralStoreSource {
  id                 Int           @id @default(autoincrement())
  purchasedAt        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isDeleted          Boolean       @default(false)
  name               String
  brandName          String?
  quantity           Int?
  unitName           String?
  totalPrice         Int?
  sellerInformation  String?
  cashMemoNo         String?
  cashMemoDate       DateTime?
  cashMemoImage      Json?
  oicSignature       String?
  skSignature        String?
  lastUpdatedById    Int?
  lastUpdatedBy      User?         @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  note               String?
  images             Json[]
  finalQuantity      Int?
  indentNo           Int?
  warrantyExpireDate DateTime?
  warrantyType       String?
  GeneralStore       GeneralStore? @relation(fields: [generalStoreId], references: [id])
  generalStoreId     Int?
  financialYear      FinancialYear @relation(fields: [financialYearId], references: [id])
  financialYearId    Int
  sourceType         SourceType    @default(others)
  institution        Institution   @relation(fields: [institutionId], references: [id])
  institutionId      Int
}

model GeneralStoreDistribution {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
  allocatedAt     DateTime      @default(now())
  personName      String?
  name            String
  shopName        String?
  department      String
  quantity        Int?
  unitName        String?
  lastUpdatedById Int? // Nullable
  lastUpdatedBy   User?         @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  note            String?
  images          Json[]
  finalQuantity   Int?
  GeneralStore    GeneralStore? @relation(fields: [generalStoreId], references: [id])
  generalStoreId  Int?
  financialYear   FinancialYear @relation(fields: [financialYearId], references: [id])
  financialYearId Int
  indentNo        Int?
  institution     Institution   @relation(fields: [institutionId], references: [id])
  institutionId   Int
}

model GeneralStore {
  id                             Int                        @id @default(autoincrement())
  createdAt                      DateTime                   @default(now())
  updatedAt                      DateTime                   @updatedAt
  isDeleted                      Boolean                    @default(false)
  name                           String
  stockAmount                    Int
  unitName                       String
  lastUpdatedById                Int? // Nullable
  lastUpdatedBy                  User?                      @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  generalStoreNotes              GeneralStoreNote[]
  alertWhenStockAmountIsLessThan Int?
  type                           ItemType                   @default(other)
  status                         MachineStatus              @default(operational)
  storageLocation                String?
  sources                        GeneralStoreSource[]
  distributions                  GeneralStoreDistribution[]
  financialYear                  FinancialYear              @relation(fields: [financialYearId], references: [id])
  financialYearId                Int
  generalStoreHistory            GeneralStoreHistory[]
  institution                    Institution                @relation(fields: [institutionId], references: [id])
  institutionId                  Int
  Shop                           Shop?                      @relation(fields: [shopId], references: [id])
  shopId                         Int?
  Department                     Department?                @relation(fields: [departmentId], references: [id])
  departmentId                   Int?
  inGeneralStore                 Boolean                    @default(true)
}

model GeneralStoreNote {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  note           String
  generalStore   GeneralStore @relation(fields: [generalStoreId], references: [id])
  generalStoreId Int
  images         Json[]
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  institution    Institution  @relation(fields: [institutionId], references: [id])
  institutionId  Int
}

model GeneralStoreHistory {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  label          String
  generalStore   GeneralStore @relation(fields: [generalStoreId], references: [id])
  generalStoreId Int
  images         Json[]
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  institution    Institution  @relation(fields: [institutionId], references: [id])
  institutionId  Int
}

model Department {
  id            Int            @id @default(autoincrement())
  name          String
  institution   Institution    @relation(fields: [institutionId], references: [id])
  institutionId Int
  Shop          Shop[]
  generalStore  GeneralStore[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        Int?
}

model Shop {
  id            Int            @id @default(autoincrement())
  name          String
  institution   Institution    @relation(fields: [institutionId], references: [id])
  institutionId Int
  department    Department     @relation(fields: [departmentId], references: [id])
  departmentId  Int
  generalStore  GeneralStore[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        Int?
}

enum ItemType {
  machine
  tools
  rawmaterial
  equipment
  vehicle
  furniture
  electronics
  other
}

enum MachineStatus {
  operational
  faulty
  underRepair
  disposed
}

enum SourceType {
  purchase
  donation
  others
  restock
}
